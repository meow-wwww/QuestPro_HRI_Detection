//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Spot
{
    [Serializable]
    public class TrajectoryGoal : Message
    {
        public const string k_RosMessageName = "spot_msgs/Trajectory";
        public override string RosMessageName => k_RosMessageName;

        public Geometry.PoseStampedMsg target_pose;
        //  After this duration, the command will time out and the robot will stop. Must be non-zero
        public BuiltinInterfaces.DurationMsg duration;
        //  If true, the feedback from the trajectory command must indicate that the robot is
        //  at the goal position. If set to false, the robot being near the goal is equivalent to
        //  it being at the goal. This is based on the feedback received from the boston dynamics
        //  API call at
        //  https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference.html?highlight=status_near_goal#se2trajectorycommand-feedback-status
        public bool precise_positioning;

        public TrajectoryGoal()
        {
            this.target_pose = new Geometry.PoseStampedMsg();
            this.duration = new BuiltinInterfaces.DurationMsg();
            this.precise_positioning = false;
        }

        public TrajectoryGoal(Geometry.PoseStampedMsg target_pose, BuiltinInterfaces.DurationMsg duration, bool precise_positioning)
        {
            this.target_pose = target_pose;
            this.duration = duration;
            this.precise_positioning = precise_positioning;
        }

        public static TrajectoryGoal Deserialize(MessageDeserializer deserializer) => new TrajectoryGoal(deserializer);

        private TrajectoryGoal(MessageDeserializer deserializer)
        {
            this.target_pose = Geometry.PoseStampedMsg.Deserialize(deserializer);
            this.duration = BuiltinInterfaces.DurationMsg.Deserialize(deserializer);
            deserializer.Read(out this.precise_positioning);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.target_pose);
            serializer.Write(this.duration);
            serializer.Write(this.precise_positioning);
        }

        public override string ToString()
        {
            return "TrajectoryGoal: " +
            "\ntarget_pose: " + target_pose.ToString() +
            "\nduration: " + duration.ToString() +
            "\nprecise_positioning: " + precise_positioning.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize, MessageSubtopic.Goal);
        }
    }
}
